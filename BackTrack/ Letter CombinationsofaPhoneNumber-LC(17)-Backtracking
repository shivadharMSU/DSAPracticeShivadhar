
https://leetcode.com/problems/letter-combinations-of-a-phone-number/

Letter Combinations of a Phone Number

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

class Solution {
    private Map<Character, String> map = Map.of(
        '2', "abc",
        '3', "def",
        '4', "ghi",
        '5', "jkl",
        '6', "mno",
        '7', "pqrs",
        '8', "tuv",
        '9', "wxyz"
    );

    public List<String> letterCombinations(String digits) {
        if (digits.length() == 0) {
            return new ArrayList();
        }

        List<String> ans = new ArrayList<>();
        subsString(digits, "", 0, ans);
        return ans;
    }

    public void subsString(String digits, String cur, int index, List<String> ans) {
        if (cur.length() == digits.length()) {
            ans.add(cur); // Add the current combination to the result
            return;
        } else {
            String str = map.get(digits.charAt(index));
            for (char ch : str.toCharArray()) {
                subsString(digits, cur + ch, index + 1, ans); // Recursively explore combinations
            }
        }
    }
}

Time Complexity:

The time complexity of this code is O(4^N), where N is the number of digits in the input string. For each digit, there are at most 4 corresponding characters (in the case of '7' and '9'), and the code explores all possible combinations, resulting in 4^N combinations.
Space Complexity:

The space complexity is O(N) due to the space required for the recursion stack, which can go up to a depth of N. The additional space for storing the combinations is also O(N) in the worst case.
The code uses a recursive approach to generate all possible letter combinations for the input sequence of digits, leveraging the character-to-string mappings in the map. It builds the combinations by considering one digit at a time and exploring all character possibilities for each digit.