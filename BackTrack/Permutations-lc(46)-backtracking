Link : https://leetcode.com/problems/permutations/
 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]


class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> arr = new ArrayList<List<Integer>>();
        perm(nums, 0, arr);
        return arr;
    }

    public void perm(int[] nums, int start, List<List<Integer>> arr) {
        if (start == nums.length) {
            // Create a deep copy of the current permutation and add it to the result
            List<Integer> list = new ArrayList<Integer>();
            for (int i = 0; i < nums.length; i++) {
                list.add(nums[i]);
            }
            arr.add(new ArrayList<Integer>(list));
            return;
        } else {
            for (int i = start; i < nums.length; i++) {
                swap(nums, i, start); // Swap the elements to generate permutations
                perm(nums, start + 1, arr); // Recurse with the updated array
                swap(nums, i, start); // Backtrack by restoring the original array
            }
        }
    }

    public void swap(int[] arr, int start, int i) {
        int temp = arr[start];
        arr[start] = arr[i];
        arr[i] = temp;
    }
}


Time Complexity:

The time complexity of this code is O(N!), where N is the number of elements in the nums array. This is because there are N! possible permutations, and for each permutation, you need to make N swaps, leading to a total of N! * N operations.
Space Complexity:

The space complexity is O(N) due to the space required for the recursion stack, which can go up to N levels deep. The additional space for storing permutations is dominated by the recursive stack space.
The code generates all possible permutations of the input array nums and stores them in the arr list. It does so by using a backtracking approach to explore all possible orders of the elements in the array.