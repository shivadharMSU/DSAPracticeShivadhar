


79. Word Search - https://leetcode.com/problems/word-search/description/

Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.



class Solution {
    public boolean exist(char[][] board, String word) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (check(board, i, j, board.length, board[0].length, 0, word)) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean check(char[][] board, int i, int j, int m, int n, int count, String word) {
        if (count >= word.length()) {
            return true; // The word has been found
        }

        if (i < 0 || j < 0 || i >= m || j >= n || board[i][j] != word.charAt(count)) {
            return false; // Out of bounds or mismatched character
        }

        boolean res = false;
        if (board[i][j] == word.charAt(count)) {
            board[i][j] += 100; // Mark the current cell as visited
            res = check(board, i - 1, j, m, n, count + 1, word) ||
                  check(board, i + 1, j, m, n, count + 1, word) ||
                  check(board, i, j + 1, m, n, count + 1, word) || 
                  check(board, i, j - 1, m, n, count + 1, word);
            board[i][j] -= 100; // Unmark the current cell
        }
        return res;
    }
}


Time Complexity:

The time complexity of this code is O(M * N * 4^L), where M and N are the dimensions of the board, and L is the length of the word to be found. The function exist iterates through each cell in the board (M * N), and the check function performs a depth-first search with 4 recursive calls (up, down, left, right) at each cell for a word of length L. In the worst case, each of the 4 recursive calls explores all possible paths, resulting in a total of 4^L operations.
Space Complexity:

The space complexity is O(L) due to the space required for the recursion stack, where L is the length of the word. The additional space for variables is constant and does not depend on the input size.
The code performs a depth-first search with backtracking to check if the given word can be found in the 2D board of characters. It marks cells as visited while exploring and unmarks them when backtracking to avoid revisiting cells.