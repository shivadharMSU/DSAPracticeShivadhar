Leetcode- https://leetcode.com/problems/palindrome-partitioning/description/

131. Palindrome Partitioning

Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.


class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> list = new ArrayList<String>();
        helper(s, 0, ans, list);
        return ans;
    }

    public void helper(String s, int start, List<List<String>> ans, List<String> list) {
        if (start == s.length()) {
            ans.add(new ArrayList<>(list)); // Add the current partitioning to the result
            return;
        }
        for (int i = start; i < s.length(); i++) {
            if (isPalindrome(s, start, i)) {
                list.add(s.substring(start, i + 1)); // Add a palindrome substring to the current partition
                helper(s, i + 1, ans, list); // Recurse with the updated index
                list.remove(list.size() - 1); // Backtrack by removing the last added substring
            }
        }
    }

    public boolean isPalindrome(String s, int start, int end) {
        while (start <= end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}

Time Complexity:

The time complexity of this code is O(N * 2^N), where N is the length of the input string s. The function partition iterates through the string, and for each character, it explores all possible partitions. The isPalindrome function checks if a substring is a palindrome in O(N) time, and there can be up to 2^N possible partitions.
Space Complexity:

The space complexity is O(N) due to the space required for the recursion stack, and it's O(N^2) for storing the substrings in the list. In the worst case, there can be up to 2^N partitions, each containing N/2 characters on average.
The code generates all possible palindrome partitions of the input string s using a recursive backtracking approach. It checks if each substring is a palindrome and backtracks when necessary to explore different partitions.