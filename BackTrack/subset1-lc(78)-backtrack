Link: https://leetcode.com/problems/subsets/

Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.


class Solution {

    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        List<Integer> list = new ArrayList<Integer>();

        // Start the recursion with an empty list and index 0
        helper(nums, 0, ans, list);
        return ans;
    }

    // Helper function to generate subsets using recursion
    public void helper(int[] nums, int start, List<List<Integer>> ans, List<Integer> list) {
        // Base case: If we have processed all elements in the array
        if (start >= nums.length) {
            ans.add(new ArrayList<>(list)); // Add a deep copy of the current list to the answer
            return;
        } else {
            // Include the current element in the subset
            list.add(nums[start]);
            helper(nums, start + 1, ans, list);

            // Exclude the current element from the subset
            list.remove(list.size() - 1);
            helper(nums, start + 1, ans, list);
        }
    }
}


Time Complexity:

The time complexity of this code is O(2^n), where n is the number of elements in the nums array. This is because, for each element in nums, you have two choices: include it in the subset or exclude it. Therefore, you have 2^n possible subsets.
Space Complexity:

The space complexity is O(n) due to the space required for the recursion stack. In addition, each subset is stored in a list, which also contributes to the space complexity. In the worst case, there can be 2^n subsets, each with an average size of n/2, so the space complexity can be considered O(n * 2^n).
Note: The deep copy of the list is made to ensure that the subsets added to the answer are not modified in subsequent iterations. This is crucial for the correctness of the code.