https://leetcode.com/problems/n-queens/

N-Queens

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens placement, where Q and . both indicate a queen and an empty space, respectively.


class Solution {
    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        List<List<String>> res = new ArrayList<>();

        // Initialize the board with empty cells (represented as '.')
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = '.';
            }
        }

        dfs(0, board, res);
        return res;
    }

    public void dfs(int col, char[][] board, List<List<String>> res) {
        if (col == board.length) {
            res.add(construct(board));
            return;
        }

        for (int row = 0; row < board.length; row++) {
            if (validate(col, row, board)) {
                board[row][col] = 'Q';
                dfs(col + 1, board, res);
                board[row][col] = '.';
            }
        }
    }

    public boolean validate(int column, int row, char[][] board) {
        int col = column;

        // Check for queens in the same column
        while (col >= 0) {
            if (board[row][col] == 'Q') {
                return false;
            }
            col--;
        }

        col = column;
        int r = row;

        // Check for queens in the upper-left diagonal
        while (col >= 0 && r >= 0) {
            if (board[r][col] == 'Q') {
                return false;
            }
            col--;
            r--;
        }

        col = column;
        r = row;

        // Check for queens in the lower-left diagonal
        while (col >= 0 && r < board.length) {
            if (board[r][col] == 'Q') {
                return false;
            }
            col--;
            r++;
        }

        return true;
    }

    public List<String> construct(char[][] board) {
        List<String> res = new ArrayList<>();
        for (int i = 0; i < board.length; i++) {
            String s = new String(board[i]);
            res.add(s);
        }
        return res;
    }
}


Time Complexity:

The time complexity is O(N!), where N is the size of the chessboard (the number of rows and columns). The code explores all possible combinations of queen placements using backtracking. The worst-case time complexity arises when you have to consider all possible placements.
Space Complexity:

The space complexity is O(N^2), which accounts for the space used by the board and res. The board has dimensions NÃ—N, and the res list can have at most N solutions, each containing N strings of length N.
The code constructs all valid N-Queens solutions using backtracking. It validates the placement of queens by checking for attacks in the same column, upper-left diagonal, and lower-left diagonal, ensuring that no two queens can attack each other.