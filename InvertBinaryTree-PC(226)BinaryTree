Links 
https://leetcode.com/problems/invert-binary-tree/description/
226. Invert Binary Tree

Given the root of a binary tree, invert the tree, and return its root.
Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]
Input: root = [2,1,3]
Output: [2,3,1]

Solution

this code takes a binary tree as input, recursively inverts it by swapping the left and right children at each node, and returns the root of the inverted tree. It uses a standard depth-first traversal approach to perform the inversion.

class Solution {

    // This method inverts the given binary tree and returns the root of the inverted tree.
    public TreeNode invertTree(TreeNode root) {
        
        // Base case: If the root is null, there's nothing to invert, so return null.
        if (root == null)
            return null;

        // Recursively invert the left subtree.
        invertTree(root.left);
        
        // Recursively invert the right subtree.
        invertTree(root.right);
        
        // Swap the left and right children of the current node to invert it.
        TreeNode temp = root.left;
        root.left = root.right;
        root.right = temp;
        
        // Return the root of the inverted tree.
        return root;
    }
}


The time and space complexity of the given code for inverting a binary tree using a recursive approach can be analyzed as follows:

Time Complexity:
- The code visits each node in the binary tree exactly once, performing constant-time operations at each node (swapping the left and right children).
- Therefore, the time complexity of the `invertTree` function is O(n), where 'n' is the number of nodes in the binary tree.

Space Complexity:
- The space complexity of the code is determined by the recursion stack, which is used to store function calls as the code traverses the tree.
- In the worst case, the recursion stack can have a depth of 'n' (the height of the tree), where each recursive call consumes some stack space.
- Therefore, the space complexity of the code is O(n) in the worst case.

It's important to note that the space complexity is influenced by the height of the binary tree. In a balanced binary tree, the height is logarithmic (O(log n)), and the space complexity would also be O(log n). However, in the worst case, when the tree is highly unbalanced and resembles a linked list, the height becomes 'n,' leading to the worst-case space complexity of O(n).
