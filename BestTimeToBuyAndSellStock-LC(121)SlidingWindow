https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
121. Best Time to Buy and Sell Stock

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104


Optimised solution;


class Solution {
    public int maxProfit(int[] prices) {
        // Initialize pointers 'left' and 'right' to track the buy and sell positions.
        int left = 0;
        int right = 1;

        // Initialize the result variable to keep track of the maximum profit.
        int res = 0;

        // Continue the loop until the 'right' pointer reaches the end of the 'prices' array.
        while (right < prices.length) {
            // Check if the price at 'right' is greater than the price at 'left'.
            if (prices[right] > prices[left]) {
                // Calculate the profit by selling at 'right' and buying at 'left'.
                int profit = prices[right] - prices[left];
                // Update 'res' with the maximum profit found so far.
                res = Math.max(res, profit);
                // Move the 'right' pointer to consider the possibility of a higher selling price.
                right++;
            } else {
                // If the price at 'right' is not greater, move both 'left' and 'right' pointers
                // to look for a new buying position.
                left = right;
                right++;
            }
        }

        // Return the maximum profit obtained.
        return res;
    }
}


Time Complexity:
The time complexity of this code is O(N), where N is the number of elements in the prices array. The code iterates through the array once using two pointers, 'left' and 'right,' and performs constant time operations within the loop for each element. In the worst case, it might need to traverse the entire array once, which results in a linear time complexity.

Space Complexity:
The space complexity of this code is O(1), which means it uses a constant amount of additional space regardless of the size of the input array. The space usage is primarily for the integer variables left, right, res, and profit, and their memory usage doesn't depend on the size of the input array. Hence, the space complexity is constant.

In summary:

Time Complexity: O(N)
Space Complexity: O(1)
This code is efficient both in terms of time and space complexity. It solves the problem with a single pass through the array and minimal memory usage.