Link : https://leetcode.com/problems/roman-to-integer/description/
13. Roman to Integer


Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.

 

Example 1:

Input: s = "III"
Output: 3
Explanation: III = 3.
Example 2:

Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 3:

Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
 

Constraints:

1 <= s.length <= 15
s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').
It is guaranteed that s is a valid roman numeral in the range [1, 3999].



Solution:
put all roman number combnations to map and iterate the string and and calculate the sum
 but here to many if conditions
 

Time Complexity:O(n)
Space Complexity:O(1)


My Own solution:
-----------------

public static  int romanToInt(String s) {

    HashMap<Character,Integer> map = new HashMap<Character,Integer>();

    map.put('I',1);
    map.put('V',5);
    map.put('X',10);
    map.put('L',50);
    map.put('C',100);
    map.put('D',500);
    map.put('M',1000);
    int n = s.length();

    int sum = 0;
    for(int i=0;i<n;i++){

        char c =  s.charAt(i);
        if(c == 'I' && i<n-1){
            char ch =  s.charAt(i+1);
            if(ch == 'V'){
                i++;
                sum = sum + (map.get('V')-map.get('I'));
            }else if(ch == 'X'){
                i++;
                sum = sum + (map.get('X')-map.get('I'));
            }else{
                sum = sum + map.get(c);
            }
        }else if(c == 'X' && i<n-1){
            char ch =  s.charAt(i+1);
            if(ch== 'L'){
                i++;
                sum = sum + map.get('L')-map.get('X');
            }else if(ch == 'C'){
                i++;
                sum = sum + map.get('C')-map.get('X');
            }else{
                sum = sum + map.get(c);
            }
        }else if(c == 'C' && i<n-1){

            char ch =  s.charAt(i+1);
            if(ch == 'D'){
                i++;
                sum = sum + map.get('D')-map.get('C');
            }else if(ch == 'M'){
                i++;
                sum = sum + (map.get('M')-map.get('C'));
            }else{
                sum = sum +map.get(c);
            }
        }else{
            sum = sum +map.get(c);
        }


    }

    return sum;
}




Best solutions with same time Complexity- 

declare the array and store the numbers and iterate the array and store the sum the
values , when ever there there exist a previous vales smaller then the curent
then we will substract the previosu number two times as it earlier addedtwo times and add the current number as usually




public int romanToInt(String str) {
    
    int[] arr = new int[26];
    
    arr['I' - 'A'] = 1;
    arr['V' - 'A'] = 5;
    arr['X' - 'A'] = 10;
    arr['L' - 'A'] = 50;
    arr['C' - 'A'] = 100;
    arr['D' - 'A'] = 500;
    arr['M' - 'A'] = 1000;
    
    
    char prev = 'A';
    int sum = 0;
    
    for(char s:str.toCharArray()){
        
        if(arr[s-'A'] > arr[prev-'A']){
            sum = sum - 2*arr[prev-'A'];
        }
        sum = sum + arr[s-'A'];
        prev = s;
    }
    
    return sum;
}