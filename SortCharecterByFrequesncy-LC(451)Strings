https://leetcode.com/problems/sort-characters-by-frequency/description/
451. Sort Characters By Frequency


Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
 

Constraints:

1 <= s.length <= 5 * 105
s consists of uppercase and lowercase English letters and digits.




Code:
----



Optimised Solution:
Space complexity: O(n)
Time Complexity: O(nlogk) - k is number of ditinct charcters



class Solution {


    public String frequencySort(String s) {

          // create Hash map to the frequency of each array
					HashMap<Character,Integer> map = new HashMap<Character,Integer>();
            
					for(char ch:s.toCharArray()){
                  map.put(ch,map.getOrDefault(ch,0)+1);
					}

            StringBuilder ans = new StringBuilder();

       //use priority queue , store charechers bases of their frequencies by sorting them in desending order
					PriorityQueue<Character> queue = new PriorityQueue<Character>(
						(a,b)->map.get(b)-map.get(a));
					queue.addAll(map.keySet());

          //iterate the queue and append the answer
					while(!queue.isEmpty()){
						char c = queue.poll();
						for(int i=0;i<map.get(c);i++){
                ans.append(c);
						}

					}

					return ans.toString(); 
                 
		}
}





