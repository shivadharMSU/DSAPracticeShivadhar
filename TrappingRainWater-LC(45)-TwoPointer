
https://leetcode.com/problems/trapping-rain-water/
42. Trapping Rain Water

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105


brute force:


Optimised solution;



class Solution {
    public int trap(int[] height) {
        // Initialize two pointers, 'l' and 'r', at the left and right ends of the array.
        int l = 0;
        int r = height.length - 1;

        // Initialize variables to keep track of the maximum heights on the left and right sides.
        int leftMax = height[l];
        int rightMax = height[r];

        // Initialize the result variable to keep track of the trapped water.
        int res = 0;

        // Continue the loop until the 'l' pointer is less than the 'r' pointer.
        while (l < r) {
            // If the left side's maximum height is smaller than the right side's,
            if (leftMax < rightMax) {
                // Move the 'l' pointer to the right.
                l++;
                // Update the left maximum height if we encounter a taller wall.
                leftMax = Math.max(leftMax, height[l]);
                // Calculate and add the trapped water between the left and right boundaries.
                res += leftMax - height[l];
            } else {
                // If the right side's maximum height is smaller than or equal to the left side's,
                // Move the 'r' pointer to the left.
                r--;
                // Update the right maximum height if we encounter a taller wall.
                rightMax = Math.max(rightMax, height[r]);
                // Calculate and add the trapped water between the left and right boundaries.
                res += rightMax - height[r];
            }
        }

        // Return the total trapped water.
        return res;
    }
}


Time Complexity:
The time complexity of this code is O(N), where N is the number of elements in the height array. This is because the code iterates through the array once using the two-pointer approach. In the worst case, it may have to traverse the entire array from both ends once, but it still results in a linear time complexity.

Space Complexity:
The space complexity of this code is O(1), which means it uses a constant amount of additional space regardless of the size of the input array. The space usage is primarily for the variables l, r, leftMax, rightMax, and res, all of which are simple integers, and their memory usage doesn't depend on the size of the input array. Hence, the space complexity is constant.

In summary:

Time Complexity: O(N)
Space Complexity: O(1)
This code is efficient both in terms of time and space complexity.