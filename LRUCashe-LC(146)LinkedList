link- https://leetcode.com/problems/lru-cache/description/
146. LRU Cache
Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.

 

Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4






Time Complexity:

get(int key) method: O(1) - Retrieving an item from a HashMap and moving it to the front of the linked list are both constant time operations.
put(int key, int value) method: O(1) - Adding or updating an item in the HashMap and inserting it at the front of the linked list are both constant time operations.
Overall, the LRUCache operations are designed to be efficient, and they generally operate in constant time due to the use of a HashMap for quick key lookups and a doubly-linked list for efficient node manipulation.

Space Complexity:

The space complexity is O(capacity) because the LRUCache class stores a fixed number of key-value pairs, and the space required scales with the capacity.

Additionally, the LRUCache uses a HashMap to store the key-node mappings. In the worst case, where all keys are distinct, this HashMap can have up to 'capacity' entries.

Therefore, the overall space complexity of the LRUCache class is O(capacity).

Keep in mind that this analysis assumes that the capacity of the LRUCache is fixed and does not consider the space complexity of individual methods within the LRUCache class, which primarily depends on the data structures used (e.g., HashMap and doubly-linked list).





Regenerate






Codeclass Node {
    int key;
    int val;
    Node next;
    Node prev;

    public Node(int key, int val) {
        this.key = key;
        this.val = val;
    }
}

class LRUCache {

    Node head = new Node(0, 0);  // Dummy head node of the doubly-linked list
    Node tail = new Node(0, 0);  // Dummy tail node of the doubly-linked list
    Map<Integer, Node> map = new HashMap();  // HashMap to store key-node mappings
    int size;

    public LRUCache(int capacity) {
        size = capacity;
        head.next = tail;  // Initialize the doubly-linked list with head and tail
        tail.prev = head;
    }

    public int get(int key) {

        if (map.containsKey(key)) {
            Node node = map.get(key);
            remove(node);   // Move the accessed node to the front
            insert(node);
            return node.val;
        } else {
            return -1;  // Key not found, return -1
        }
    }

    public void remove(Node node) {
        map.remove(node.key);  // Remove the node from the HashMap
        node.prev.next = node.next;  // Update the next pointer of the previous node
        node.next.prev = node.prev;  // Update the prev pointer of the next node
    }

    public void insert(Node node) {

        map.put(node.key, node);  // Add the node to the HashMap
        node.next = head.next;  // Connect the new node to the current first node
        head.next.prev = node;  // Update the previous pointer of the current first node
        head.next = node;  // Update the head's next pointer to the new node
        node.prev = head;  // Update the new node's previous pointer to the head
    }

    public void put(int key, int value) {

        if (map.containsKey(key)) {
            Node oldNode = map.get(key);
            remove(oldNode);  // Remove the existing node
        }

        if (size == map.size()) {
            remove(tail.prev);  // If cache is full, remove the least recently used node (tail.prev)
        }

        insert(new Node(key, value));  // Insert the new node with the given key and value
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
